
Lab1C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000144  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c96  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a9e  00000000  00000000  00000ed6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000034b  00000000  00000000  00001974  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001cc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000541  00000000  00000000  00001d14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f9  00000000  00000000  00002255  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000234e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  10:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  14:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  18:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  1c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  20:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  24:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  28:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  30:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  34:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  38:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  3c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  44:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  48:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  4c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  50:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  54:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  58:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  5c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  60:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  68:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  6c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  70:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  74:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  7c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  80:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  84:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  88:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  8c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  90:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  94:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  98:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  9c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e4 e4       	ldi	r30, 0x44	; 68
  c0:	f1 e0       	ldi	r31, 0x01	; 1
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a0 30       	cpi	r26, 0x00	; 0
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>
  ce:	0e 94 86 00 	call	0x10c	; 0x10c <main>
  d2:	0c 94 a0 00 	jmp	0x140	; 0x140 <_exit>

000000d6 <__bad_interrupt>:
  d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000da <goBackwards2Sec>:
}

void BotActionR(){
	PORTB = LEFT; //right motor forwards, left motor backwards = turn left
	_delay_ms(1000); //wait 1 second
	goBackwards2Sec(); //self explanatory :)
  da:	15 b8       	out	0x05, r1	; 5
  dc:	2f ef       	ldi	r18, 0xFF	; 255
  de:	87 ea       	ldi	r24, 0xA7	; 167
  e0:	91 e6       	ldi	r25, 0x61	; 97
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <goBackwards2Sec+0x8>
  ea:	00 c0       	rjmp	.+0      	; 0xec <goBackwards2Sec+0x12>
  ec:	00 00       	nop
  ee:	08 95       	ret

000000f0 <BotActionL>:
  f0:	80 e8       	ldi	r24, 0x80	; 128
  f2:	85 b9       	out	0x05, r24	; 5
  f4:	2f ef       	ldi	r18, 0xFF	; 255
  f6:	83 ed       	ldi	r24, 0xD3	; 211
  f8:	90 e3       	ldi	r25, 0x30	; 48
  fa:	21 50       	subi	r18, 0x01	; 1
  fc:	80 40       	sbci	r24, 0x00	; 0
  fe:	90 40       	sbci	r25, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <BotActionL+0xa>
 102:	00 c0       	rjmp	.+0      	; 0x104 <BotActionL+0x14>
 104:	00 00       	nop
 106:	0e 94 6d 00 	call	0xda	; 0xda <goBackwards2Sec>
 10a:	08 95       	ret

0000010c <main>:
void BotActionR();
void goBackwards2Sec();

int main(void)
{
	DDRB = 0b11110000; // set 7-4th bits as outputs
 10c:	80 ef       	ldi	r24, 0xF0	; 240
 10e:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b01100000; // turn on LEDs connected to 5-6th bits
 110:	90 e6       	ldi	r25, 0x60	; 96
 112:	95 b9       	out	0x05, r25	; 5
	DDRD = 0b00110000; // set 5th and 4th pins on D as inputs
 114:	90 e3       	ldi	r25, 0x30	; 48
 116:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0b11110000; //enable pull up resistors for port D pins 7-4
 118:	8b b9       	out	0x0b, r24	; 11
	

	while (1) // loop forever
	{
		uint8_t mpr = PIND & 0b00110000; // read and extract only 4-5 th bit
 11a:	89 b1       	in	r24, 0x09	; 9
 11c:	80 73       	andi	r24, 0x30	; 48
		mpr = ~mpr; //flip bits since PINDD is active low
		if (mpr == 0b00100000) // check if the right whisker is hit
 11e:	80 95       	com	r24
		{
			BotActionR(); // call BotAction
		}
		else if (mpr == 0b00010000) // check if the left whisker is hit
 120:	80 31       	cpi	r24, 0x10	; 16
 122:	11 f4       	brne	.+4      	; 0x128 <main+0x1c>
		{
			BotActionL(); // call BotAction
 124:	0e 94 78 00 	call	0xf0	; 0xf0 <BotActionL>
		}
		PORTB = FORWARD; //resume forward movement
 128:	80 e9       	ldi	r24, 0x90	; 144
 12a:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12c:	2f ef       	ldi	r18, 0xFF	; 255
 12e:	80 e7       	ldi	r24, 0x70	; 112
 130:	92 e0       	ldi	r25, 0x02	; 2
 132:	21 50       	subi	r18, 0x01	; 1
 134:	80 40       	sbci	r24, 0x00	; 0
 136:	90 40       	sbci	r25, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <main+0x26>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <main+0x30>
 13c:	00 00       	nop
 13e:	ed cf       	rjmp	.-38     	; 0x11a <main+0xe>

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>

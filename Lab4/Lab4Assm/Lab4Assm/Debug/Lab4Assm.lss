
AVRASM ver. 2.2.8  C:\Users\Lucas Plaisted\Documents\GitHub\ECE375\Lab4\Lab4Assm\Lab4Assm\Astrid_Delestine_and_Lucas_Plaisted_Lab4_Sourcecode.asm Wed Feb 15 18:28:19 2023

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m128def.inc'
C:\Users\Lucas Plaisted\Documents\GitHub\ECE375\Lab4\Lab4Assm\Lab4Assm\Astrid_Delestine_and_Lucas_Plaisted_Lab4_Sourcecode.asm(9): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m128def.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m128def.inc'
C:\Users\Lucas Plaisted\Documents\GitHub\ECE375\Lab4\Lab4Assm\Lab4Assm\Astrid_Delestine_and_Lucas_Plaisted_Lab4_Sourcecode.asm(9): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m128def.inc'
                                 
                                 ;***********************************************************
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega128.xml ***********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m128def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega128
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega128
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M128DEF_INC_
                                 #define _M128DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega128
                                 #pragma AVRPART ADMIN PART_NAME ATmega128
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x97
                                 .equ	SIGNATURE_002	= 0x02
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UCSR1C	= 0x9d	; MEMORY MAPPED
                                 .equ	UDR1	= 0x9c	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0x9b	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0x9a	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0x98	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0x99	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0x95	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0x90	; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x8c	; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x8b	; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x8a	; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x88	; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x89	; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x86	; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x87	; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x84	; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x85	; MEMORY MAPPED
                                 .equ	OCR3CL	= 0x82	; MEMORY MAPPED
                                 .equ	OCR3CH	= 0x83	; MEMORY MAPPED
                                 .equ	ICR3L	= 0x80	; MEMORY MAPPED
                                 .equ	ICR3H	= 0x81	; MEMORY MAPPED
                                 .equ	ETIMSK	= 0x7d	; MEMORY MAPPED
                                 .equ	ETIFR	= 0x7c	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x7a	; MEMORY MAPPED
                                 .equ	OCR1CL	= 0x78	; MEMORY MAPPED
                                 .equ	OCR1CH	= 0x79	; MEMORY MAPPED
                                 .equ	TWCR	= 0x74	; MEMORY MAPPED
                                 .equ	TWDR	= 0x73	; MEMORY MAPPED
                                 .equ	TWAR	= 0x72	; MEMORY MAPPED
                                 .equ	TWSR	= 0x71	; MEMORY MAPPED
                                 .equ	TWBR	= 0x70	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x6f	; MEMORY MAPPED
                                 .equ	XMCRA	= 0x6d	; MEMORY MAPPED
                                 .equ	XMCRB	= 0x6c	; MEMORY MAPPED
                                 .equ	EICRA	= 0x6a	; MEMORY MAPPED
                                 .equ	SPMCSR	= 0x68	; MEMORY MAPPED
                                 .equ	PORTG	= 0x65	; MEMORY MAPPED
                                 .equ	DDRG	= 0x64	; MEMORY MAPPED
                                 .equ	PING	= 0x63	; MEMORY MAPPED
                                 .equ	PORTF	= 0x62	; MEMORY MAPPED
                                 .equ	DDRF	= 0x61	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	XDIV	= 0x3c
                                 .equ	RAMPZ	= 0x3b
                                 .equ	EICRB	= 0x3a
                                 .equ	EIMSK	= 0x39
                                 .equ	EIFR	= 0x38
                                 .equ	TIMSK	= 0x37
                                 .equ	TIFR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OCR0	= 0x31
                                 .equ	ASSR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x26
                                 .equ	ICR1H	= 0x27
                                 .equ	TCCR2	= 0x25
                                 .equ	TCNT2	= 0x24
                                 .equ	OCR2	= 0x23
                                 .equ	OCDR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	SFIOR	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTA	= 0x1b
                                 .equ	DDRA	= 0x1a
                                 .equ	PINA	= 0x19
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR0	= 0x0c
                                 .equ	UCSR0A	= 0x0b
                                 .equ	UCSR0B	= 0x0a
                                 .equ	UBRR0L	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCH	= 0x05
                                 .equ	ADCL	= 0x04
                                 .equ	PORTE	= 0x03
                                 .equ	DDRE	= 0x02
                                 .equ	PINE	= 0x01
                                 .equ	PINF	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; SFIOR - Special Function IO Register
                                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWBR - TWI Bit Rate register
                                 .equ	I2BR	= TWBR	; For compatibility
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	I2CR	= TWCR	; For compatibility
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	I2IE	= TWIE	; For compatibility
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	I2EN	= TWEN	; For compatibility
                                 .equ	ENI2C	= TWEN	; For compatibility
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	I2WC	= TWWC	; For compatibility
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	I2STO	= TWSTO	; For compatibility
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	I2STA	= TWSTA	; For compatibility
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	I2EA	= TWEA	; For compatibility
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 .equ	I2INT	= TWINT	; For compatibility
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	I2SR	= TWSR	; For compatibility
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWS0	= TWPS0	; For compatibility
                                 .equ	I2GCE	= TWPS0	; For compatibility
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS1	= TWPS1	; For compatibility
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	I2S3	= TWS3	; For compatibility
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	I2S4	= TWS4	; For compatibility
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	I2S5	= TWS5	; For compatibility
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	I2S6	= TWS6	; For compatibility
                                 .equ	TWS7	= 7	; TWI Status
                                 .equ	I2S7	= TWS7	; For compatibility
                                 
                                 ; TWDR - TWI Data register
                                 .equ	I2DR	= TWDR	; For compatibility
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	I2AR	= TWAR	; For compatibility
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR00	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR01	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR02	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR03	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR04	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR05	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR06	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR07	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	UCSZ2	= UCSZ02	; For compatibility
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL0	= 6	; USART Mode Select
                                 
                                 ; UBRR0H - USART Baud Rate Register Hight Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR10	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR11	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR12	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR13	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR14	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR15	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR16	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR17	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL1	= 6	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register Hight Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 ;.equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 ;.equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	SM2	= 2	; Sleep Mode Select
                                 .equ	SM0	= 3	; Sleep Mode Select
                                 .equ	SM1	= 4	; Sleep Mode Select
                                 .equ	SE	= 5	; Sleep Enable
                                 .equ	SRW10	= 6	; External SRAM Wait State Select
                                 .equ	SRE	= 7	; External SRAM Enable
                                 
                                 ; XMCRA - External Memory Control Register A
                                 .equ	SRW11	= 1	; Wait state select bit upper page
                                 .equ	SRW00	= 2	; Wait state select bit lower page
                                 .equ	SRW01	= 3	; Wait state select bit lower page
                                 .equ	SRL0	= 4	; Wait state page limit
                                 .equ	SRL1	= 5	; Wait state page limit
                                 .equ	SRL2	= 6	; Wait state page limit
                                 
                                 ; XMCRB - External Memory Control Register B
                                 .equ	XMM0	= 0	; External Memory High Mask
                                 .equ	XMM1	= 1	; External Memory High Mask
                                 .equ	XMM2	= 2	; External Memory High Mask
                                 .equ	XMBK	= 7	; External Memory Bus Keeper Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value
                                 .equ	CAL1	= 1	; Oscillator Calibration Value
                                 .equ	CAL2	= 2	; Oscillator Calibration Value
                                 .equ	CAL3	= 3	; Oscillator Calibration Value
                                 .equ	CAL4	= 4	; Oscillator Calibration Value
                                 .equ	CAL5	= 5	; Oscillator Calibration Value
                                 .equ	CAL6	= 6	; Oscillator Calibration Value
                                 .equ	CAL7	= 7	; Oscillator Calibration Value
                                 
                                 ; XDIV - XTAL Divide Control Register
                                 .equ	XDIV0	= 0	; XTAl Divide Select Bit 0
                                 .equ	XDIV1	= 1	; XTAl Divide Select Bit 1
                                 .equ	XDIV2	= 2	; XTAl Divide Select Bit 2
                                 .equ	XDIV3	= 3	; XTAl Divide Select Bit 3
                                 .equ	XDIV4	= 4	; XTAl Divide Select Bit 4
                                 .equ	XDIV5	= 5	; XTAl Divide Select Bit 5
                                 .equ	XDIV6	= 6	; XTAl Divide Select Bit 6
                                 .equ	XDIVEN	= 7	; XTAL Divide Enable
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; RAMPZ - RAM Page Z Select Register
                                 .equ	RAMPZ0	= 0	; RAM Page Z Select Register Bit 0
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMCR	= SPMCSR	; For compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	ASRE	= RWWSRE	; For compatibility
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	ASB	= RWWSB	; For compatibility
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 
                                 ; ***** MISC *************************
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR321	= 0	; Prescaler Reset Timer/Counter3, Timer/Counter2, and Timer/Counter1
                                 .equ	PSR1	= PSR321	; For compatibility
                                 .equ	PSR2	= PSR321	; For compatibility
                                 .equ	PSR3	= PSR321	; For compatibility
                                 .equ	PSR0	= 1	; Prescaler Reset Timer/Counter0
                                 .equ	PUD	= 2	; Pull Up Disable
                                 ;.equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 .equ	ISC30	= 6	; External Interrupt Sense Control Bit
                                 .equ	ISC31	= 7	; External Interrupt Sense Control Bit
                                 
                                 ; EICRB - External Interrupt Control Register B
                                 .equ	ISC40	= 0	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC41	= 1	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC50	= 2	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC51	= 3	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC60	= 4	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC61	= 5	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC70	= 6	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC71	= 7	; External Interrupt 7-4 Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	GICR	= EIMSK	; For compatibility
                                 .equ	GIMSK	= EIMSK	; For compatibility
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 .equ	INT3	= 3	; External Interrupt Request 3 Enable
                                 .equ	INT4	= 4	; External Interrupt Request 4 Enable
                                 .equ	INT5	= 5	; External Interrupt Request 5 Enable
                                 .equ	INT6	= 6	; External Interrupt Request 6 Enable
                                 .equ	INT7	= 7	; External Interrupt Request 7 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	GIFR	= EIFR	; For compatibility
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 .equ	INTF3	= 3	; External Interrupt Flag 3
                                 .equ	INTF4	= 4	; External Interrupt Flag 4
                                 .equ	INTF5	= 5	; External Interrupt Flag 5
                                 .equ	INTF6	= 6	; External Interrupt Flag 6
                                 .equ	INTF7	= 7	; External Interrupt Flag 7
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** PORTE ************************
                                 ; PORTE - Data Register, Port E
                                 .equ	PORTE0	= 0	; 
                                 .equ	PE0	= 0	; For compatibility
                                 .equ	PORTE1	= 1	; 
                                 .equ	PE1	= 1	; For compatibility
                                 .equ	PORTE2	= 2	; 
                                 .equ	PE2	= 2	; For compatibility
                                 .equ	PORTE3	= 3	; 
                                 .equ	PE3	= 3	; For compatibility
                                 .equ	PORTE4	= 4	; 
                                 .equ	PE4	= 4	; For compatibility
                                 .equ	PORTE5	= 5	; 
                                 .equ	PE5	= 5	; For compatibility
                                 .equ	PORTE6	= 6	; 
                                 .equ	PE6	= 6	; For compatibility
                                 .equ	PORTE7	= 7	; 
                                 .equ	PE7	= 7	; For compatibility
                                 
                                 ; DDRE - Data Direction Register, Port E
                                 .equ	DDE0	= 0	; 
                                 .equ	DDE1	= 1	; 
                                 .equ	DDE2	= 2	; 
                                 .equ	DDE3	= 3	; 
                                 .equ	DDE4	= 4	; 
                                 .equ	DDE5	= 5	; 
                                 .equ	DDE6	= 6	; 
                                 .equ	DDE7	= 7	; 
                                 
                                 ; PINE - Input Pins, Port E
                                 .equ	PINE0	= 0	; 
                                 .equ	PINE1	= 1	; 
                                 .equ	PINE2	= 2	; 
                                 .equ	PINE3	= 3	; 
                                 .equ	PINE4	= 4	; 
                                 .equ	PINE5	= 5	; 
                                 .equ	PINE6	= 6	; 
                                 .equ	PINE7	= 7	; 
                                 
                                 
                                 ; ***** PORTF ************************
                                 ; PORTF - Data Register, Port F
                                 .equ	PORTF0	= 0	; 
                                 .equ	PF0	= 0	; For compatibility
                                 .equ	PORTF1	= 1	; 
                                 .equ	PF1	= 1	; For compatibility
                                 .equ	PORTF2	= 2	; 
                                 .equ	PF2	= 2	; For compatibility
                                 .equ	PORTF3	= 3	; 
                                 .equ	PF3	= 3	; For compatibility
                                 .equ	PORTF4	= 4	; 
                                 .equ	PF4	= 4	; For compatibility
                                 .equ	PORTF5	= 5	; 
                                 .equ	PF5	= 5	; For compatibility
                                 .equ	PORTF6	= 6	; 
                                 .equ	PF6	= 6	; For compatibility
                                 .equ	PORTF7	= 7	; 
                                 .equ	PF7	= 7	; For compatibility
                                 
                                 ; DDRF - Data Direction Register, Port F
                                 .equ	DDF0	= 0	; 
                                 .equ	DDF1	= 1	; 
                                 .equ	DDF2	= 2	; 
                                 .equ	DDF3	= 3	; 
                                 .equ	DDF4	= 4	; 
                                 .equ	DDF5	= 5	; 
                                 .equ	DDF6	= 6	; 
                                 .equ	DDF7	= 7	; 
                                 
                                 ; PINF - Input Pins, Port F
                                 .equ	PINF0	= 0	; 
                                 .equ	PINF1	= 1	; 
                                 .equ	PINF2	= 2	; 
                                 .equ	PINF3	= 3	; 
                                 .equ	PINF4	= 4	; 
                                 .equ	PINF5	= 5	; 
                                 .equ	PINF6	= 6	; 
                                 .equ	PINF7	= 7	; 
                                 
                                 
                                 ; ***** PORTG ************************
                                 ; PORTG - Data Register, Port G
                                 .equ	PORTG0	= 0	; 
                                 .equ	PG0	= 0	; For compatibility
                                 .equ	PORTG1	= 1	; 
                                 .equ	PG1	= 1	; For compatibility
                                 .equ	PORTG2	= 2	; 
                                 .equ	PG2	= 2	; For compatibility
                                 .equ	PORTG3	= 3	; 
                                 .equ	PG3	= 3	; For compatibility
                                 .equ	PORTG4	= 4	; 
                                 .equ	PG4	= 4	; For compatibility
                                 
                                 ; DDRG - Data Direction Register, Port G
                                 .equ	DDG0	= 0	; 
                                 .equ	DDG1	= 1	; 
                                 .equ	DDG2	= 2	; 
                                 .equ	DDG3	= 3	; 
                                 .equ	DDG4	= 4	; 
                                 
                                 ; PING - Input Pins, Port G
                                 .equ	PING0	= 0	; 
                                 .equ	PING1	= 1	; 
                                 .equ	PING2	= 2	; 
                                 .equ	PING3	= 3	; 
                                 .equ	PING4	= 4	; 
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TCCR0 - Timer/Counter Control Register
                                 .equ	CS00	= 0	; Clock Select 0
                                 .equ	CS01	= 1	; Clock Select 1
                                 .equ	CS02	= 2	; Clock Select 2
                                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                                 .equ	CTC0	= WGM01	; For compatibility
                                 .equ	COM00	= 4	; Compare match Output Mode 0
                                 .equ	COM01	= 5	; Compare Match Output Mode 1
                                 .equ	WGM00	= 6	; Waveform Generation Mode 0
                                 .equ	PWM0	= WGM00	; For compatibility
                                 .equ	FOC0	= 7	; Force Output Compare
                                 
                                 ; TCNT0 - Timer/Counter Register
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0 - Output Compare Register
                                 .equ	OCR0_0	= 0	; 
                                 .equ	OCR0_1	= 1	; 
                                 .equ	OCR0_2	= 2	; 
                                 .equ	OCR0_3	= 3	; 
                                 .equ	OCR0_4	= 4	; 
                                 .equ	OCR0_5	= 5	; 
                                 .equ	OCR0_6	= 6	; 
                                 .equ	OCR0_7	= 7	; 
                                 
                                 ; ASSR - Asynchronus Status Register
                                 .equ	TCR0UB	= 0	; Timer/Counter Control Register 0 Update Busy
                                 .equ	OCR0UB	= 1	; Output Compare register 0 Busy
                                 .equ	TCN0UB	= 2	; Timer/Counter0 Update Busy
                                 .equ	AS0	= 3	; Asynchronus Timer/Counter 0
                                 
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0	= 1	; Output Compare Flag 0
                                 
                                 ; SFIOR - Special Function IO Register
                                 ;.equ	PSR0	= 1	; Prescaler Reset Timer/Counter0
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; ETIMSK - Extended Timer/Counter Interrupt Mask Register
                                 .equ	OCIE1C	= 0	; Timer/Counter 1, Output Compare Match C Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; ETIFR - Extended Timer/Counter Interrupt Flag register
                                 .equ	OCF1C	= 0	; Timer/Counter 1, Output Compare C Match Flag
                                 
                                 ; SFIOR - Special Function IO Register
                                 ;.equ	PSR321	= 0	; Prescaler Reset, T/C3, T/C2, T/C1
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode Bit 0
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Waveform Generation Mode Bit 1
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	COM1C0	= 2	; Compare Output Mode 1C, bit 0
                                 .equ	COM1C1	= 3	; Compare Output Mode 1C, bit 1
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Clock Select bit 0
                                 .equ	CS11	= 1	; Clock Select 1 bit 1
                                 .equ	CS12	= 2	; Clock Select1 bit 2
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1C	= 5	; Force Output Compare for channel C
                                 .equ	FOC1B	= 6	; Force Output Compare for channel B
                                 .equ	FOC1A	= 7	; Force Output Compare for channel A
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TCCR2 - Timer/Counter Control Register
                                 .equ	CS20	= 0	; Clock Select
                                 .equ	CS21	= 1	; Clock Select
                                 .equ	CS22	= 2	; Clock Select
                                 .equ	WGM21	= 3	; Waveform Generation Mode
                                 .equ	CTC2	= WGM21	; For compatibility
                                 .equ	COM20	= 4	; Compare Match Output Mode
                                 .equ	COM21	= 5	; Compare Match Output Mode
                                 .equ	WGM20	= 6	; Wafeform Generation Mode
                                 .equ	PWM2	= WGM20	; For compatibility
                                 .equ	FOC2	= 7	; Force Output Compare
                                 
                                 ; TCNT2 - Timer/Counter Register
                                 .equ	TCNT2_0	= 0	; Timer/Counter Register Bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter Register Bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter Register Bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter Register Bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter Register Bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter Register Bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter Register Bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter Register Bit 7
                                 
                                 ; OCR2 - Output Compare Register
                                 .equ	OCR2_0	= 0	; Output Compare Register Bit 0
                                 .equ	OCR2_1	= 1	; Output Compare Register Bit 1
                                 .equ	OCR2_2	= 2	; Output Compare Register Bit 2
                                 .equ	OCR2_3	= 3	; Output Compare Register Bit 3
                                 .equ	OCR2_4	= 4	; Output Compare Register Bit 4
                                 .equ	OCR2_5	= 5	; Output Compare Register Bit 5
                                 .equ	OCR2_6	= 6	; Output Compare Register Bit 6
                                 .equ	OCR2_7	= 7	; Output Compare Register Bit 7
                                 
                                 ; TIMSK - 
                                 .equ	TOIE2	= 6	; 
                                 .equ	OCIE2	= 7	; 
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2	= 7	; Output Compare Flag 2
                                 
                                 
                                 ; ***** TIMER_COUNTER_3 **************
                                 ; ETIMSK - Extended Timer/Counter Interrupt Mask Register
                                 .equ	OCIE3C	= 1	; Timer/Counter3, Output Compare Match Interrupt Enable
                                 .equ	TOIE3	= 2	; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3B	= 3	; Timer/Counter3 Output CompareB Match Interrupt Enable
                                 .equ	OCIE3A	= 4	; Timer/Counter3 Output CompareA Match Interrupt Enable
                                 .equ	TICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; ETIFR - Extended Timer/Counter Interrupt Flag register
                                 .equ	OCF3C	= 1	; Timer/Counter3 Output Compare C Match Flag
                                 .equ	TOV3	= 2	; Timer/Counter3 Overflow Flag
                                 .equ	OCF3B	= 3	; Output Compare Flag 1B
                                 .equ	OCF3A	= 4	; Output Compare Flag 1A
                                 .equ	ICF3	= 5	; Input Capture Flag 1
                                 
                                 ; SFIOR - Special Function IO Register
                                 ;.equ	PSR321	= 0	; Prescaler Reset, T/C3, T/C2, T/C1
                                 ;.equ	PSR1	= PSR321	; For compatibility
                                 ;.equ	PSR2	= PSR321	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0	; Waveform Generation Mode Bit 0
                                 .equ	PWM30	= WGM30	; For compatibility
                                 .equ	WGM31	= 1	; Waveform Generation Mode Bit 1
                                 .equ	PWM31	= WGM31	; For compatibility
                                 .equ	COM3C0	= 2	; Compare Output Mode 3C, bit 0
                                 .equ	COM3C1	= 3	; Compare Output Mode 3C, bit 1
                                 .equ	COM3B0	= 4	; Compare Output Mode 3B, bit 0
                                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                                 .equ	COM3A0	= 6	; Comparet Ouput Mode 3A, bit 0
                                 .equ	COM3A1	= 7	; Compare Output Mode 3A, bit 1
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0	; Clock Select 3 bit 0
                                 .equ	CS31	= 1	; Clock Select 3 bit 1
                                 .equ	CS32	= 2	; Clock Select3 bit 2
                                 .equ	WGM32	= 3	; Waveform Generation Mode
                                 .equ	CTC30	= WGM32	; For compatibility
                                 .equ	WGM33	= 4	; Waveform Generation Mode
                                 .equ	CTC31	= WGM33	; For compatibility
                                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                                 .equ	ICNC3	= 7	; Input Capture 3  Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter3 Control Register C
                                 .equ	FOC3C	= 5	; Force Output Compare for channel C
                                 .equ	FOC3B	= 6	; Force Output Compare for channel B
                                 .equ	FOC3A	= 7	; Force Output Compare for channel A
                                 
                                 ; TCNT3L - Timer/Counter3 Low Byte
                                 .equ	TCN3L0	= 0	; Timer/Counter 3 bit 0
                                 .equ	TCN3L1	= 1	; Timer/Counter 3 bit 1
                                 .equ	TCN3L2	= 2	; Timer/Counter 3 bit 2
                                 .equ	TCN3L3	= 3	; Timer/Counter 3 bit 3
                                 .equ	TCN3L4	= 4	; Timer/Counter 3 bit 4
                                 .equ	TCN3L5	= 5	; Timer/Counter 3 bit 5
                                 .equ	TCN3L6	= 6	; Timer/Counter 3 bit 6
                                 .equ	TCN3L7	= 7	; Timer/Counter 3 bit 7
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDTCSR	= WDTCR	; For compatibility
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDTOE	= WDCE	; For compatibility
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADCSR	= ADCSRA	; For compatibility
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADFR	= 5	; ADC  Free Running Select
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	CKOPT	= 4	; Oscillator Options
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	WDTON	= 0	; Watchdog timer always on
                                 .equ	M103C	= 1	; ATmega103 compatibility mode
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0xffff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 4096
                                 .equ	RAMEND	= 0x10ff
                                 .equ	XRAMEND	= 0xffff
                                 .equ	E2END	= 0x0fff
                                 .equ	EEPROMEND	= 0x0fff
                                 .equ	EEADRBITS	= 12
                                 #pragma AVRPART MEMORY PROG_FLASH 131072
                                 #pragma AVRPART MEMORY EEPROM 4096
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 4096
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0xf000
                                 .equ	NRWW_STOP_ADDR	= 0xffff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0xefff
                                 .equ	PAGESIZE	= 128
                                 .equ	FIRSTBOOTSTART	= 0xfe00
                                 .equ	SECONDBOOTSTART	= 0xfc00
                                 .equ	THIRDBOOTSTART	= 0xf800
                                 .equ	FOURTHBOOTSTART	= 0xf000
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	INT3addr	= 0x0008	; External Interrupt Request 3
                                 .equ	INT4addr	= 0x000a	; External Interrupt Request 4
                                 .equ	INT5addr	= 0x000c	; External Interrupt Request 5
                                 .equ	INT6addr	= 0x000e	; External Interrupt Request 6
                                 .equ	INT7addr	= 0x0010	; External Interrupt Request 7
                                 .equ	OC2addr	= 0x0012	; Timer/Counter2 Compare Match
                                 .equ	OVF2addr	= 0x0014	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0016	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0018	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x001a	; Timer/Counter Compare Match B
                                 .equ	OVF1addr	= 0x001c	; Timer/Counter1 Overflow
                                 .equ	OC0addr	= 0x001e	; Timer/Counter0 Compare Match
                                 .equ	OVF0addr	= 0x0020	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXC0addr	= 0x0024	; USART0, Rx Complete
                                 .equ	UDRE0addr	= 0x0026	; USART0 Data Register Empty
                                 .equ	UTXC0addr	= 0x0028	; USART0, Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	OC1Caddr	= 0x0030	; Timer/Counter1 Compare Match C
                                 .equ	ICP3addr	= 0x0032	; Timer/Counter3 Capture Event
                                 .equ	OC3Aaddr	= 0x0034	; Timer/Counter3 Compare Match A
                                 .equ	OC3Baddr	= 0x0036	; Timer/Counter3 Compare Match B
                                 .equ	OC3Caddr	= 0x0038	; Timer/Counter3 Compare Match C
                                 .equ	OVF3addr	= 0x003a	; Timer/Counter3 Overflow
                                 .equ	URXC1addr	= 0x003c	; USART1, Rx Complete
                                 .equ	UDRE1addr	= 0x003e	; USART1, Data Register Empty
                                 .equ	UTXC1addr	= 0x0040	; USART1, Tx Complete
                                 .equ	TWIaddr	= 0x0042	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0044	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 70	; size in words
                                 
                                 #endif  /* _M128DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ;*	This is the skeleton file for Lab 4 of ECE 375
                                 ;*
                                 ;*	 Author: Enter your name
                                 ;*	   Date: Enter Date
                                 ;*
                                 ;***********************************************************
                                 
                                 .include "m128def.inc"			; Include definition file
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega128.xml ***********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m128def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega128
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega128
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M128DEF_INC_
                                 #endif  /* _M128DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ;***********************************************************
                                 ;*	Internal Register Definitions and Constants
                                 ;***********************************************************
                                 .def	mpr = r16				; Multipurpose register
                                 .def	rlo = r0				; Low byte of MUL result
                                 .def	rhi = r1				; High byte of MUL result
                                 .def	zero = r2				; Zero register, set to zero in INIT, useful for calculations
                                 .def	A = r3					; A variable
                                 .def	B = r4					; Another variable
                                 
                                 .def	oloop = r17				; Outer Loop Counter
                                 .def	iloop = r18				; Inner Loop Counter
                                 
                                 
                                 ;***********************************************************
                                 ;*	Start of Code Segment
                                 ;***********************************************************
                                 .cseg							; Beginning of code segment
                                 
                                 ;-----------------------------------------------------------
                                 ; Interrupt Vectors
                                 ;-----------------------------------------------------------
                                 .org	$0000					; Beginning of IVs
000000 c055                      		rjmp 	INIT			; Reset interrupt
                                 
                                 .org	$0056					; End of Interrupt Vectors
                                 
                                 ;-----------------------------------------------------------
                                 ; Program Initialization
                                 ;-----------------------------------------------------------
                                 INIT:							; The initialization routine
                                 
                                 		; Initialize Stack Pointer
000056 ef0f                      		ldi		mpr, low(RAMEND) 
000057 bf0d                      		out		SPL, mpr
000058 e100                      		ldi		mpr, high(RAMEND)
000059 bf0e                      		out		SPH, mpr
                                 		; TODO
                                 
00005a 2422                      		clr		zero			; Set the zero register to zero, maintain
                                 										; these semantics, meaning, don't
                                 										; load anything else into it.
                                 
                                 ;-----------------------------------------------------------
                                 ; Main Program
                                 ;-----------------------------------------------------------
                                 MAIN:							; The Main program
                                 
                                 		; Call function to load ADD16 operands
00005b d0e2                      		rcall LOADADD16
                                 		; Operands stored in $0110 and $0112
00005c 0000                      		nop ; Check load ADD16 operands (Set Break point here #1)
00005d d00d                      		rcall ADD16
                                 		; Call ADD16 function to display its results (calculate FCBA + FFFF)
                                 		; Result stored in $0120, should be $1FCB9
00005e 0000                      		nop ; Check ADD16 result (Set Break point here #2)
                                 
                                 
                                 		; Call function to load SUB16 operands
00005f d105                      		rcall LOADSUB16
                                 		; Operands stored in $0114 and $0116
000060 0000                      		nop ; Check load SUB16 operands (Set Break point here #3)
                                 
                                 		; Call SUB16 function to display its results (calculate FCB9 - E420)
000061 d031                      		rcall SUB16
                                 		; Result stored in $0130, should be $1899
000062 0000                      		nop ; Check SUB16 result (Set Break point here #4)
                                 
                                 
                                 		; Call function to load MUL24 operands
000063 d0b3                      		rcall LOADMUL24
                                 		; Operands stored in $0118 and $011B
000064 0000                      		nop ; Check load MUL24 operands (Set Break point here #5)
                                 
                                 		; Call MUL24 function to display its results (calculate FFFFFF * FFFFFF)
000065 d04e                      		rcall MUL24
                                 		; Result stored in $0140, should be $FFFFFE000001
000066 0000                      		nop ; Check MUL24 result (Set Break point here #6)
                                 
                                 		; Setup the COMPOUND function direct test
000067 d125                      		rcall LOADCOMPOUND
                                 		; Operands stored in $0114 (G = $FCBA), $0116 (H = $2022), and $0112 (I = $21BB)
000068 0000                      		nop ; Check load COMPOUND operands (Set Break point here #7)
                                 
                                 		; Call the COMPOUND function
000069 0000                      		nop ; Check COMPOUND result (Set Break point here #8)
                                 
00006a cfff                      DONE:	rjmp	DONE			; Create an infinite while loop to signify the
                                 								; end of the program.
                                 
                                 ;***********************************************************
                                 ;*	Functions and Subroutines
                                 ;***********************************************************
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: ADD16
                                 ; Desc: Adds two 16-bit numbers and generates a 24-bit number
                                 ;       where the high byte of the result contains the carry
                                 ;       out bit.
                                 ;-----------------------------------------------------------
                                 ADD16:
00006b 930f                      		push mpr
00006c 923f                      		push A
00006d 93bf                      		push XH
00006e 93df                      		push YH
00006f 93ff                      		push ZH
000070 93af                      		push XL
000071 93cf                      		push YL
000072 93ef                      		push ZL
                                 
000073 2700                      		clr mpr
000074 9488                      		bclr 0 ; CLEAR THE CARRY FLAG!!! (just in case lamp)
                                 		; Load beginning address of first operand into X
000075 e1a0                      		ldi		XL, low(ADD16_OP1)	; Load low byte of address
000076 e0b1                      		ldi		XH, high(ADD16_OP1)	; Load high byte of address
                                 		; Load beginning address of second operand into Y
000077 e1c2                      		ldi		YL, low(ADD16_OP2)	; Load low byte of address
000078 e0d1                      		ldi		YH, high(ADD16_OP2)	; Load high byte of address
                                 		; Load beginning address of result into Z
000079 e2e0                      		ldi		ZL, low(ADD16_Result) ; points the end of Z
00007a e0f1                      		ldi		ZH, high(ADD16_Result)
                                 		; Execute the function
                                 		;2 16 bit numbers being added generates a max of 24 bit number
                                 		; ie 1111_1111_1111_1111
                                 		;   +1111_1111_1111_1111
                                 		;	____________________
                                 		;	1_1111_1111_1111_1110	
                                 		; can do 8 bits at a time
                                 		
                                 		
                                 
                                 		;add 2 lowest bytes
00007b 903d                      		ld A, X+
00007c 0d03                      		add mpr, A
00007d 9039                      		ld A, Y+
00007e 0d03                      		add mpr, A
                                 		;mpr now equals x + y & carry flag is included
                                 		;store this lower result in the lowest memory of the result
00007f 9301                      		st Z+, mpr
000080 2700                      		clr mpr
                                 
000081 903d                      		ld A, X+
000082 1d03                      		adc mpr, A
000083 9039                      		ld A, Y+
000084 0d03                      		add mpr, A
                                 		;mpr now equals x + y & carry flag is included
                                 		;store this lower result in the lowest memory of the result
000085 9301                      		st Z+, mpr
000086 2700                      		clr mpr
                                 
                                 
                                 		;if c flag is set
000087 f010                      		brcs noCarry;
000088 e001                      		ldi mpr, $01;
000089 8300                      		st Z, mpr
                                 noCarry:
00008a 91ef                      		pop ZL
00008b 91cf                      		pop YL
00008c 91af                      		pop XL
00008d 91ff                      		pop ZH
00008e 91df                      		pop YH
00008f 91bf                      		pop XH
000090 903f                      		pop A
000091 910f                      		pop mpr
000092 9508                      		ret						; End a function with RET
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: SUB16
                                 ; Desc: Subtracts two 16-bit numbers and generates a 16-bit
                                 ;       result. Always subtracts from the bigger values.
                                 ;-----------------------------------------------------------
                                 SUB16:
                                 		; Execute the function here
000093 930f                      		push mpr
000094 923f                      		push A
000095 924f                      		push B
000096 93bf                      		push XH
000097 93df                      		push YH
000098 93ff                      		push ZH
000099 93af                      		push XL
00009a 93cf                      		push YL
00009b 93ef                      		push ZL
                                 
                                 		; Load beginning address of first operand into X
00009c e1a4                      		ldi		XL, low(SUB16_OP1)	; Load low byte of address
00009d e0b1                      		ldi		XH, high(SUB16_OP1)	; Load high byte of address
                                 		; Load beginning address of second operand into Y
00009e e1c6                      		ldi		YL, low(SUB16_OP2)	; Load low byte of address
00009f e0d1                      		ldi		YH, high(SUB16_OP2)	; Load high byte of address
                                 		; Load beginning address of result into Z
0000a0 e3e0                      		ldi		ZL, low(SUB16_Result) ; points the end of Z
0000a1 e0f1                      		ldi		ZH, high(SUB16_Result)
                                 
0000a2 903d                      		ld A, X+	; Load low byte of OP1 into A, X now points at high byte
0000a3 9049                      		ld B, Y+	; Load low byte of OP2 into B, Y now points at high byte
0000a4 1834                      		sub A, B	; Subtract low byte of OP2 from low byte of OP1
0000a5 9231                      		st Z+, A	; Store result into low byte of SUB16_Result, Z now points go high byte
0000a6 903c                      		ld A, X		; Load high byte of OP1 into A
0000a7 8048                      		ld B, Y		; Load high byte of OP2 into B
0000a8 0834                      		sbc A, B	; Subtract high byte of OP2 from low byte of OP1 with carry
0000a9 8230                      		st Z, A		; Store result to high byte of SUB16_Result
                                 
0000aa 91ef                      		pop ZL
0000ab 91cf                      		pop YL
0000ac 91af                      		pop XL
0000ad 91ff                      		pop ZH
0000ae 91df                      		pop YH
0000af 91bf                      		pop XH
0000b0 904f                      		pop B
0000b1 903f                      		pop A
0000b2 910f                      		pop mpr
0000b3 9508                      		ret						; End a function with RET
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: MUL24
                                 ; Desc: Multiplies two 24-bit numbers and generates a 48-bit
                                 ;       result.
                                 ;-----------------------------------------------------------
                                 MUL24:
                                 ;* - Simply adopting MUL16 ideas to MUL24 will not give you steady results. You should come up with different ideas.
                                 /*
                                 Imagine we are multiplying two 24-bit numbers, ABC and DEF.
                                 A is the highest byte, C is the lowest byte. So A is referring
                                 to only the highest byte of ABC. Imagine that when multiplying
                                 C and F, the result is CFH:CFL where CFH and CFL are the high
                                 and low bytes respectively of the result of multiplying C and F.
                                 
                                 If you were to write out
                                 how to multiply these together with individual 8-bit multiplication,
                                 it might look something like this:
                                 
                                 				A	B	C	*
                                 				D	E	F
                                 ===================================
                                 					CFH	CFL
                                 				CEH	CEL
                                 			CDH	CDL
                                 				BFH	BFL
                                 			BEH	BEL
                                 		BDH	BDL
                                 			AFH	AFL
                                 		AEH	AEL
                                 +	ADH	ADL
                                 	5	4	3	2	1	0
                                 ===================================
                                 
                                 This result does in fact take up 6 bytes, or 48-bits.
                                 Something to keep in mind here is that when adding each
                                 individual result to the total (such as CDL) there will
                                 be previous results already added to that byte. That means
                                 that we need to keep in mind carries. There will be no 
                                 carry coming out of the last byte, as two 24-bit numbers
                                 multiplied together (FFFFFF x FFFFFF) have a maximum
                                 possible value of FFFFFE000001, which is only 6 bytes!
                                 
                                 The way I will handle carries is every time I do addition,
                                 I will check the carry bit to see if it is set. If it is,
                                 I will move up where I am looking at by one byte, then add
                                 the carry. Since this is also addition, I will check the
                                 carry AGAIN! Repeat until no more carries. This means 
                                 I could carry up to 4 times, (the lowest byte will never
                                 carry since it is only added to once) so for reliabilities
                                 sake I will use a loop to check/add caries instead of just
                                 adding the carry to every possibly byte even if there is
                                 no carry.
                                 
                                 */
                                 		; Execute the function here
0000b4 93bf                      		push XH		; Push literally everything because
0000b5 93af                      		push XL		; I have no idea what I will need :)
0000b6 93df                      		push YH
0000b7 93cf                      		push YL
0000b8 93ff                      		push ZH
0000b9 93ef                      		push ZL
0000ba 930f                      		push mpr
0000bb 920f                      		push rlo
0000bc 921f                      		push rhi
0000bd 923f                      		push A
0000be 924f                      		push B
0000bf 932f                      		push iloop
0000c0 931f                      		push oloop
                                 
                                 		; Load beginning address of MUL24 result to X
0000c1 e4a0                      		ldi		XL, low(MUL24_Result)
0000c2 e0b1                      		ldi		XH, high(MUL24_Result)
0000c3 922d                      		st X+, zero
0000c4 922d                      		st X+, zero
0000c5 922d                      		st X+, zero
0000c6 922c                      		st X, zero	; Clear result just in case!
                                 
                                 		; Load beginning address of first operand into Z
0000c7 e1e8                      		ldi		ZL, low(MUL24_OP1)	; Load low byte of address
0000c8 e0f1                      		ldi		ZH, high(MUL24_OP1)	; Load high byte of address
                                 		; Load beginning address of second operand into Y
0000c9 e1cb                      		ldi		YL, low(MUL24_OP2)	; Load low byte of address
0000ca e0d1                      		ldi		YH, high(MUL24_OP2)	; Load high byte of address
                                 		; Load beginning address of result into X
0000cb e4a0                      		ldi		XL, low(MUL24_Result) ; points the end of X
0000cc e0b1                      		ldi		XH, high(MUL24_Result)
                                 
                                 /*
                                 				A	B	C	*		(X pointer)
                                 				D	E	F			(Y pointer)
                                 				2	1	0			offset
                                 ===================================
                                 						CF
                                 					CE
                                 				CD
                                 					BF
                                 				BE
                                 			BD
                                 				AF
                                 			AE
                                 		AD
                                 	5	4	3	2	1	0	(Z offset)
                                 ===================================
                                 */
                                 		
0000cd 8030                      		ld A, Z		; Load C byte of OP1 to A
                                 					; A will hold the first op
0000ce 8048                      		ld B, Y		; Load F byte of OP1 to B
                                 					; B will hold the second op
0000cf 9c34                      		mul A, B	; C*F
0000d0 d031                      		rcall ADDMUL2X	; Add to result
                                 ;				A	B	C	*		(Z pointer)
                                 ;				D	E	F			(Y pointer)
                                 ;				2	1	0			offset
0000d1 9611                      		adiw XH:XL, 1	; Z offset = 1, changed so that ADDMUL2X
                                 						; adds to the correct place
                                 						; Need to do CE and BF
                                 ;				A	B	C	*		(Z pointer)
                                 ;				D	E	F			(Y pointer)
                                 ;				2	1	0			offset
0000d2 8049                      		ldd B, Y+1		; Load E to B
0000d3 9c34                      		mul A, B	;C*E
0000d4 d02d                      		rcall ADDMUL2X	; Add to result
0000d5 8031                      		ldd A, Z+1	; A <- B
0000d6 8048                      		ld B, Y		; B <- F
0000d7 9c34                      		mul A, B	; B*F
0000d8 d029                      		rcall ADDMUL2X
0000d9 9611                      		adiw XH:XL, 1	; X offset = 2
                                 						; Need to do CD, BE, and AF
                                 ;				A	B	C	*		(Z pointer)
                                 ;				D	E	F			(Y pointer)
                                 ;				2	1	0			offset
0000da 8030                      		ld A, Z		; A <- C
0000db 804a                      		ldd B, Y+2	; B <- D
0000dc 9c34                      		mul A, B	; C*D
0000dd d024                      		rcall ADDMUL2X
0000de 8031                      		ldd A, Z+1	; A <- B
0000df 8049                      		ldd B, Y+1	; B <- E
0000e0 9c34                      		mul A, B	; B*E
0000e1 d020                      		rcall ADDMUL2X
0000e2 8032                      		ldd A, Z+2	; A <-A
0000e3 8048                      		ld B, Y		; B <-F
0000e4 9c34                      		mul A, B	; A*F
0000e5 d01c                      		rcall ADDMUL2X
0000e6 9611                      		adiw XH:XL, 1	; X offset = 3
                                 						; Need to do BD and AE
                                 ;				A	B	C	*		(Z pointer)
                                 ;				D	E	F			(Y pointer)
                                 ;				2	1	0			offset
0000e7 8031                      		ldd A, Z+1	; A <- B
0000e8 804a                      		ldd B, Y+2	; B <- D
0000e9 9c34                      		mul A, B	; B*D
0000ea d017                      		rcall ADDMUL2X
0000eb 8032                      		ldd A, Z+2	; A <- A (nice)
0000ec 8049                      		ldd B, Y+1	; B <- E
0000ed 9c34                      		mul A, B	; A*E
0000ee d013                      		rcall ADDMUL2X
0000ef 9611                      		adiw XH:XL, 1	; X offset = 4
                                 						; Need to do AD
                                 ;				A	B	C	*		(Z pointer)
                                 ;				D	E	F			(Y pointer)
                                 ;				2	1	0			offset
0000f0 8032                      		ldd A, Z+2	; A <- A (nice)
0000f1 804a                      		ldd B, Y+2	; B <- D
0000f2 9c34                      		mul A, B	; A*D
0000f3 d00e                      		rcall ADDMUL2X
                                 		; done!
0000f4 911f                      		pop oloop
0000f5 912f                      		pop iloop
0000f6 904f                      		pop B
0000f7 903f                      		pop A
0000f8 901f                      		pop rhi
0000f9 900f                      		pop rlo
0000fa 910f                      		pop mpr
0000fb 91ef                      		pop ZL
0000fc 91ff                      		pop ZH
0000fd 91cf                      		pop YL
0000fe 91df                      		pop YH
0000ff 91af                      		pop XL
000100 91bf                      		pop XH
                                 
000101 9508                      		ret						; End a function with RET
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: ADDMUL2X
                                 ; Desc: Adds a partial multiplication result word to X, assuming
                                 ;		that X is already pointing to where the low result
                                 ;		byte should be placed
                                 ;		AKA if result of the multiplication needs to be placed
                                 ;		into the X starting at the second byte, then X had 
                                 ;		better already be pointing to the second byte.
                                 ;		Multiplication should already be done and sitting in
                                 ;		rlo and rhi!
                                 ;-----------------------------------------------------------
                                 ADDMUL2X:
000102 93af                      		push XL
000103 93bf                      		push XH
000104 920f                      		push rlo
000105 921f                      		push rhi
000106 923f                      		push A
                                 
000107 903c                      		ld A, X		; Pull out low byte from X
000108 0c30                      		add A, rlo	; Add rlo to low byte
000109 923d                      		st X+, A	; Place back into X, inc X
00010a 8030                      		ld A, Z		; Pull out high byte from X
00010b 1c30                      		adc A, rlo	; Add rhi to high byte plus carry
                                 		; Carry until no longer carry
                                 addmulloop:
00010c f420                      		brcc addmulfinish ; Finish if carry no longer set
00010d 903c                      		ld A, X		; Pull out current byte from X
00010e 1c32                      		adc A, zero	; Add carry to current byte
00010f 923d                      		st X+, A	; Place back into X, inc X
000110 cffb                      		rjmp addmulloop	; Return to begining of loop
                                 addmulfinish:
000111 903f                      		pop A
000112 901f                      		pop rhi
000113 900f                      		pop rlo
000114 91bf                      		pop XH
000115 91af                      		pop XL
000116 9508                      		ret
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: LOADMUL24
                                 ; Desc: Loads the numbers needed for the example MUL24
                                 ;-----------------------------------------------------------
                                 LOADMUL24:
                                 		; Execute the function here
000117 93df                      		push YH	; push regs to stack
000118 93cf                      		push YL
000119 93ff                      		push ZH
00011a 93ef                      		push ZL
00011b 930f                      		push mpr
00011c 932f                      		push iloop
00011d 931f                      		push oloop
                                 
                                 		; Uses OperandE1, OperandE2, OperandF1, and OperandF2
                                 		; Placing these into MUL24_OP1 and MUL24_OP2 respectively
00011e e0f2                      		ldi ZH, high(OperandE1)	; load OperandE1 location to Z
00011f e1e9                      		ldi ZL, low(OperandE1)
                                 		; Shift Z to prepare for program memory access:
000120 0fff                      		lsl ZH
000121 0fee                      		lsl ZL
000122 1df2                      		adc ZH, zero ; shift carry from lower byte to upper byte
000123 e0d1                      		ldi YH, high(MUL24_OP1)	; Load OP1 location into Y
000124 e1c8                      		ldi YL, low(MUL24_OP1)	; ($0118)
                                 				
000125 e013                      		ldi oloop, 3	; load oloop with 3 to loop 3 times.
                                 mulloadloop1:
000126 9105                      		lpm mpr, Z+	;load mpr from Z, inc Z
000127 9309                      		st Y+, mpr	; store mpr to Y, inc Y
000128 951a                      		dec oloop		; decrement oloop to run loop 3 times
000129 f7e1                      		brne mulloadloop1
                                 		; since operand E2 is immediately after E1 in the program data
                                 		; we should be able to just increment to it :)
                                 		; Operand E is now loaded to MUL24_OP1
                                 		
00012a e0f2                      		ldi ZH, high(OperandF1)	; load OperandF1 location to Z
00012b e1eb                      		ldi ZL, low(OperandF1)
                                 		; Shift Z to prepare for program memory access:
00012c 0fff                      		lsl ZH
00012d 0fee                      		lsl ZL
00012e 1df2                      		adc ZH, zero ; shift carry from lower byte to upper byte
00012f e0d1                      		ldi YH, high(MUL24_OP2)	; Load OP1 location into Y
000130 e1cb                      		ldi YL, low(MUL24_OP2)	; ($011B)
                                 
000131 e013                      		ldi oloop, 3	; load oloop with 3 to loop 3 times.
                                 mulloadloop2:
000132 9105                      		lpm mpr, Z+	; load mpr from Z, inc Z
000133 9309                      		st Y+, mpr	; store mpr to Y, inc Y
000134 951a                      		dec oloop		; decrement oloop to run loop 3 times
000135 f7e1                      		brne mulloadloop2
                                 		; Both operands should be loaded into program mem now!
                                 
000136 911f                      		pop oloop	; pop regs from stack
000137 912f                      		pop iloop
000138 910f                      		pop mpr
000139 91ef                      		pop ZL
00013a 91ff                      		pop ZH
00013b 91cf                      		pop YL
00013c 91df                      		pop YH
                                 
00013d 9508                      		ret						; End a function with RET
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: LOADADD16
                                 ; Desc: Loads the numbers needed for the example ADD16
                                 ;-----------------------------------------------------------
                                 LOADADD16:
                                 		; Execute the function here
00013e 93df                      		push YH	; push regs to stack
00013f 93cf                      		push YL
000140 93ff                      		push ZH
000141 93ef                      		push ZL
000142 930f                      		push mpr
000143 932f                      		push iloop
000144 931f                      		push oloop
                                 
                                 		; Uses OperandA and OperandB
                                 		; Placing these into ADD16_OP1 and ADD16_OP2 respectively
000145 e0f2                      		ldi ZH, high(OperandA)	; load OperandA location to Z
000146 e1e5                      		ldi ZL, low(OperandA)
                                 		; Shift Z to prepare for program memory access:
000147 0fff                      		lsl ZH
000148 0fee                      		lsl ZL
000149 1df2                      		adc ZH, zero ; shift carry from lower byte to upper byte
00014a e0d1                      		ldi YH, high(ADD16_OP1)	; Load OP1 location into Y
00014b e1c0                      		ldi YL, low(ADD16_OP1)	; ($0110)
                                 				
00014c e012                      		ldi oloop, 2	; load oloop with 2 to loop 2 times.
                                 addloadloop1:
00014d 9105                      		lpm mpr, Z+	; load mpr from Z, inc Z
00014e 9309                      		st Y+, mpr	; store mpr to Y, inc Y
00014f 951a                      		dec oloop		; decrement oloop to run loop 2 times
000150 f7e1                      		brne addloadloop1
                                 		; Operand A is now loaded to ADD16_OP1
                                 		
000151 e0f2                      		ldi ZH, high(OperandB)	; load OperandB location to Z
000152 e1e6                      		ldi ZL, low(OperandB)
                                 		; Shift Z to prepare for program memory access:
000153 0fff                      		lsl ZH
000154 0fee                      		lsl ZL
000155 1df2                      		adc ZH, zero ; shift carry from lower byte to upper byte
000156 e0d1                      		ldi YH, high(ADD16_OP2)	; Load OP2 location into Y
000157 e1c2                      		ldi YL, low(ADD16_OP2)	; ($0112)
                                 
000158 e012                      		ldi oloop, 2	; load oloop with 2 to loop 2 times.
                                 addloadloop2:
000159 9105                      		lpm mpr, Z+	; load mpr from Z, inc Z
00015a 9309                      		st Y+, mpr	; store mpr to Y, inc Y
00015b 951a                      		dec oloop		; decrement oloop to run loop 2 times
00015c f7e1                      		brne addloadloop2
                                 		; Both operands should be loaded into program mem now!
                                 
00015d 911f                      		pop oloop	; pop regs from stack
00015e 912f                      		pop iloop
00015f 910f                      		pop mpr
000160 91ef                      		pop ZL
000161 91ff                      		pop ZH
000162 91cf                      		pop YL
000163 91df                      		pop YH
                                 
000164 9508                      		ret						; End a function with RET
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: LOADSUB16
                                 ; Desc: Loads the numbers needed for the example SUB16
                                 ;-----------------------------------------------------------
                                 LOADSUB16:
                                 		; Execute the function here
000165 93df                      		push YH	; push regs to stack
000166 93cf                      		push YL
000167 93ff                      		push ZH
000168 93ef                      		push ZL
000169 930f                      		push mpr
00016a 932f                      		push iloop
00016b 931f                      		push oloop
                                 
                                 		; Uses OperandC and OperandD
                                 		; Placing these into SUB16_OP1 and SUB16_OP2 respectively
00016c e0f2                      		ldi ZH, high(OperandC)	; load OperandC location to Z
00016d e1e7                      		ldi ZL, low(OperandC)
                                 		; Shift Z to prepare for program memory access:
00016e 0fff                      		lsl ZH
00016f 0fee                      		lsl ZL
000170 1df2                      		adc ZH, zero ; shift carry from lower byte to upper byte
000171 e0d1                      		ldi YH, high(SUB16_OP1)	; Load OP1 location into Y
000172 e1c4                      		ldi YL, low(SUB16_OP1)	; ($0114)
                                 				
000173 e012                      		ldi oloop, 2	; load oloop with 2 to loop 2 times.
                                 subloadloop1:
000174 9105                      		lpm mpr, Z+	; load mpr from Z, inc Z
000175 9309                      		st Y+, mpr	; store mpr to Y, inc Y
000176 951a                      		dec oloop		; decrement oloop to run loop 2 times
000177 f7e1                      		brne subloadloop1
                                 		; Operand C is now loaded to ADD16_OP1
                                 		
000178 e0f2                      		ldi ZH, high(OperandD)	; load OperandD location to Z
000179 e1e8                      		ldi ZL, low(OperandD)
                                 		; Shift Z to prepare for program memory access:
00017a 0fff                      		lsl ZH
00017b 0fee                      		lsl ZL
00017c 1df2                      		adc ZH, zero ; shift carry from lower byte to upper byte
00017d e0d1                      		ldi YH, high(SUB16_OP2)	; Load OP2 location into Y
00017e e1c6                      		ldi YL, low(SUB16_OP2)	; ($0116)
                                 
00017f e012                      		ldi oloop, 2	; load oloop with 2 to loop 2 times.
                                 subloadloop2:
000180 9105                      		lpm mpr, Z+	; load mpr from Z, inc Z
000181 9309                      		st Y+, mpr	; store mpr to Y, inc Y
000182 951a                      		dec oloop		; decrement oloop to run loop 2 times
000183 f7e1                      		brne subloadloop2
                                 		; Both operands should be loaded into program mem now!
                                 
000184 911f                      		pop oloop	; pop regs from stack
000185 912f                      		pop iloop
000186 910f                      		pop mpr
000187 91ef                      		pop ZL
000188 91ff                      		pop ZH
000189 91cf                      		pop YL
00018a 91df                      		pop YH
                                 
00018b 9508                      		ret						; End a function with RET
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: COMPOUND
                                 ; Desc: Computes the compound expression ((G - H) + I)^2
                                 ;       by making use of SUB16, ADD16, and MUL24.
                                 ;
                                 ;       D, E, and F are declared in program memory, and must
                                 ;       be moved into data memory for use as input operands.
                                 ;
                                 ;       All result bytes should be cleared before beginning.
                                 ;-----------------------------------------------------------
                                 COMPOUND:
                                 
                                 		; Setup SUB16 with operands G and H
                                 		; Perform subtraction to calculate G - H
                                 
                                 		; Setup the ADD16 function with SUB16 result and operand I
                                 		; Perform addition next to calculate (G - H) + I
                                 
                                 		; Setup the MUL24 function with ADD16 result as both operands
                                 		; Perform multiplication to calculate ((G - H) + I)^2
                                 
00018c 9508                      		ret						; End a function with RET
                                 ;-----------------------------------------------------------
                                 ; Func: LOADCOMPOUND
                                 ; Desc: Loads the numbers needed for the compound, as well
                                 ;		as clearing the result locations from previous
                                 ;		functions first.
                                 ;-----------------------------------------------------------
                                 LOADCOMPOUND:
                                 		; Execute the function here
00018d 93df                      		push YH	; push regs to stack
00018e 93cf                      		push YL
00018f 93ff                      		push ZH
000190 93ef                      		push ZL
000191 930f                      		push mpr
000192 932f                      		push iloop
000193 931f                      		push oloop
                                 		
000194 d02c                      		rcall CLRRES ; Clear result memory locations
                                 
                                 		; Uses OperandG, OperandH, and OperandI
                                 		; as ( ( G - H ) + I )^2
                                 		; Meaning SUB16 with G and H
                                 		; Then ADD16 with the result and I
                                 		; Then MUL24 where both operands are the result
                                 		; So G and H need to be loaded to SUB16_OP1 and SUB16_OP2 respectively
                                 		; "I" will be loaded to ADD16_OP2 due to where it visually is in the 
                                 		; equation, although it doesn't matter too much
                                 
000195 e0f2                      		ldi ZH, high(OperandG)	; load OperandG location to Z
000196 e1ed                      		ldi ZL, low(OperandG)
                                 		; Shift Z to prepare for program memory access:
000197 0fff                      		lsl ZH
000198 0fee                      		lsl ZL
000199 1df2                      		adc ZH, zero ; shift carry from lower byte to upper byte
00019a e0d1                      		ldi YH, high(SUB16_OP1)	; Load OP1 location into Y
00019b e1c4                      		ldi YL, low(SUB16_OP1)	; ($0114)
                                 		
00019c e012                      		ldi oloop, 2	; load oloop with 2 to loop 2 times.
                                 comploadloop1:
00019d 9105                      		lpm mpr, Z+	; load mpr from Z, inc Z
00019e 9309                      		st Y+, mpr	; store mpr to Y, inc Y
00019f 951a                      		dec oloop		; decrement oloop to run loop 2 times
0001a0 f7e1                      		brne comploadloop1
                                 		; Operand G is now loaded to SUB16_OP1
                                 		
0001a1 e0f2                      		ldi ZH, high(OperandH)	; load OperandD location to Z
0001a2 e1ee                      		ldi ZL, low(OperandH)
                                 		; Shift Z to prepare for program memory access:
0001a3 0fff                      		lsl ZH
0001a4 0fee                      		lsl ZL
0001a5 1df2                      		adc ZH, zero ; shift carry from lower byte to upper byte
0001a6 e0d1                      		ldi YH, high(SUB16_OP2)	; Load OP2 location into Y
0001a7 e1c6                      		ldi YL, low(SUB16_OP2)	; ($0116)
                                 
0001a8 e012                      		ldi oloop, 2	; load oloop with 2 to loop 2 times.
                                 comploadloop2:
0001a9 9105                      		lpm mpr, Z+	; load mpr from Z, inc Z
0001aa 9309                      		st Y+, mpr	; store mpr to Y, inc Y
0001ab 951a                      		dec oloop		; decrement oloop to run loop 2 times
0001ac f7e1                      		brne comploadloop2
                                 		; Operand H now loaded to SUB16_OP2
                                 
0001ad e0f2                      		ldi ZH, high(OperandI)	; load OperandD location to Z
0001ae e1ef                      		ldi ZL, low(OperandI)
                                 		; Shift Z to prepare for program memory access:
0001af 0fff                      		lsl ZH
0001b0 0fee                      		lsl ZL
0001b1 1df2                      		adc ZH, zero ; shift carry from lower byte to upper byte
0001b2 e0d1                      		ldi YH, high(ADD16_OP2)	; Load OP2 location into Y
0001b3 e1c2                      		ldi YL, low(ADD16_OP2)	; ($0112)
                                 
0001b4 e012                      		ldi oloop, 2	; load oloop with 2 to loop 2 times.
                                 comploadloop3:
0001b5 9105                      		lpm mpr, Z+	; load mpr from Z, inc Z
0001b6 9309                      		st Y+, mpr	; store mpr to Y, inc Y
0001b7 951a                      		dec oloop		; decrement oloop to run loop 2 times
0001b8 f7e1                      		brne comploadloop3
                                 		; Operand I now loaded to ADD16_OP2
                                 
0001b9 911f                      		pop oloop	; pop regs from stack
0001ba 912f                      		pop iloop
0001bb 910f                      		pop mpr
0001bc 91ef                      		pop ZL
0001bd 91ff                      		pop ZH
0001be 91cf                      		pop YL
0001bf 91df                      		pop YH
                                 
0001c0 9508                      		ret						; End a function with RET
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: CLRRES
                                 ; Desc: Clears the memory locations of the results for 
                                 ;       ADD16, SUB16, and MUL24
                                 ;-----------------------------------------------------------
                                 CLRRES:
0001c1 93af                      		push XL
0001c2 93bf                      		push XH
0001c3 93cf                      		push YL
0001c4 93df                      		push YH
0001c5 93ef                      		push ZL
0001c6 93ff                      		push ZH
                                 
                                 		; Load beginning address of ADD16 result to Z
0001c7 e2a0                      		ldi		XL, low(ADD16_Result)	; Load low byte of address
0001c8 e0b1                      		ldi		XH, high(ADD16_Result)	; Load high byte of address
                                 		; Load beginning address of SUB16 result to Y
0001c9 e3c0                      		ldi		YL, low(SUB16_Result)	; Load low byte of address
0001ca e0d1                      		ldi		YH, high(SUB16_Result)	; Load high byte of address
                                 		; Load beginning address of MUL24 result to Z
0001cb e4e0                      		ldi		ZL, low(MUL24_Result)
0001cc e0f1                      		ldi		ZH, high(MUL24_Result)
                                 		
                                 		; Write zeros to all result locations
0001cd 922d                      		st X+, zero
0001ce 922d                      		st X+, zero
0001cf 922c                      		st X, zero	; Three bytes for ADD16 result
0001d0 9229                      		st Y+, zero
0001d1 8228                      		st Y, zero	; Two for SUB16
0001d2 9221                      		st Z+, zero
0001d3 9221                      		st Z+, zero
0001d4 9221                      		st Z+, zero
0001d5 8220                      		st Z, zero	; And FOUR for MUL24
                                 
0001d6 91ff                      		pop ZH
0001d7 91ef                      		pop ZL
0001d8 91df                      		pop YH
0001d9 91cf                      		pop YL
0001da 91bf                      		pop XH
0001db 91af                      		pop XL
                                 
0001dc 9508                      		ret						
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: MUL16
                                 ; Desc: An example function that multiplies two 16-bit numbers
                                 ;       A - Operand A is gathered from address $0101:$0100
                                 ;       B - Operand B is gathered from address $0103:$0102
                                 ;       Res - Result is stored in address
                                 ;             $0107:$0106:$0105:$0104
                                 ;       You will need to make sure that Res is cleared before
                                 ;       calling this function.
                                 ;-----------------------------------------------------------
                                 MUL16:
0001dd 923f                      		push 	A				; Save A register
0001de 924f                      		push	B				; Save B register
0001df 921f                      		push	rhi				; Save rhi register
0001e0 920f                      		push	rlo				; Save rlo register
0001e1 922f                      		push	zero			; Save zero register
0001e2 93bf                      		push	XH				; Save X-ptr
0001e3 93af                      		push	XL
0001e4 93df                      		push	YH				; Save Y-ptr
0001e5 93cf                      		push	YL
0001e6 93ff                      		push	ZH				; Save Z-ptr
0001e7 93ef                      		push	ZL
0001e8 931f                      		push	oloop			; Save counters
0001e9 932f                      		push	iloop
                                 
0001ea 2422                      		clr		zero			; Maintain zero semantics
                                 
                                 		; Set Y to beginning address of B
0001eb e0c2                      		ldi		YL, low(addrB)	; Load low byte
0001ec e0d1                      		ldi		YH, high(addrB)	; Load high byte
                                 
                                 		; Set Z to begginning address of resulting Product
0001ed e0e4                      		ldi		ZL, low(LAddrP)	; Load low byte
0001ee e0f1                      		ldi		ZH, high(LAddrP); Load high byte
                                 
                                 		; Begin outer for loop
0001ef e012                      		ldi		oloop, 2		; Load counter
                                 MUL16_OLOOP:
                                 		; Set X to beginning address of A
0001f0 e0a0                      		ldi		XL, low(addrA)	; Load low byte
0001f1 e0b1                      		ldi		XH, high(addrA)	; Load high byte
                                 
                                 		; Begin inner for loop
0001f2 e022                      		ldi		iloop, 2		; Load counter
                                 MUL16_ILOOP:
0001f3 903d                      		ld		A, X+			; Get byte of A operand
0001f4 8048                      		ld		B, Y			; Get byte of B operand
0001f5 9c34                      		mul		A,B				; Multiply A and B
0001f6 9031                      		ld		A, Z+			; Get a result byte from memory
0001f7 9041                      		ld		B, Z+			; Get the next result byte from memory
0001f8 0c03                      		add		rlo, A			; rlo <= rlo + A
0001f9 1c14                      		adc		rhi, B			; rhi <= rhi + B + carry
0001fa 8030                      		ld		A, Z			; Get a third byte from the result
0001fb 1c32                      		adc		A, zero			; Add carry to A
0001fc 8230                      		st		Z, A			; Store third byte to memory
0001fd 9212                      		st		-Z, rhi			; Store second byte to memory
0001fe 9202                      		st		-Z, rlo			; Store first byte to memory
0001ff 9631                      		adiw	ZH:ZL, 1		; Z <= Z + 1
000200 952a                      		dec		iloop			; Decrement counter
000201 f789                      		brne	MUL16_ILOOP		; Loop if iLoop != 0
                                 		; End inner for loop
                                 
000202 9731                      		sbiw	ZH:ZL, 1		; Z <= Z - 1
000203 9621                      		adiw	YH:YL, 1		; Y <= Y + 1
000204 951a                      		dec		oloop			; Decrement counter
000205 f751                      		brne	MUL16_OLOOP		; Loop if oLoop != 0
                                 		; End outer for loop
                                 
000206 912f                      		pop		iloop			; Restore all registers in reverves order
000207 911f                      		pop		oloop
000208 91ef                      		pop		ZL
000209 91ff                      		pop		ZH
00020a 91cf                      		pop		YL
00020b 91df                      		pop		YH
00020c 91af                      		pop		XL
00020d 91bf                      		pop		XH
00020e 902f                      		pop		zero
00020f 900f                      		pop		rlo
000210 901f                      		pop		rhi
000211 904f                      		pop		B
000212 903f                      		pop		A
000213 9508                      		ret						; End a function with RET
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: Template function header
                                 ; Desc: Cut and paste this and fill in the info at the
                                 ;       beginning of your functions
                                 ;-----------------------------------------------------------
                                 FUNC:							; Begin a function with a label
                                 		; Save variable by pushing them to the stack
                                 
                                 		; Execute the function here
                                 
                                 		; Restore variable by popping them from the stack in reverse order
000214 9508                      		ret						; End a function with RET
                                 
                                 
                                 ;***********************************************************
                                 ;*	Stored Program Data
                                 ;*	Do not  section.
                                 ;***********************************************************
                                 ; ADD16 operands
                                 OperandA:
000215 fcba                      	.DW 0xFCBA
                                 OperandB:
000216 ffff                      	.DW 0xFFFF
                                 
                                 ; SUB16 operands
                                 OperandC:
000217 fcb9                      	.DW 0XFCB9
                                 OperandD:
000218 e420                      	.DW 0XE420
                                 
                                 ; MUL24 operands
                                 OperandE1:
000219 ffff                      	.DW	0XFFFF
                                 OperandE2:
00021a 00ff                      	.DW	0X00FF
                                 OperandF1:
00021b ffff                      	.DW	0XFFFF
                                 OperandF2:
00021c 00ff                      	.DW	0X00FF
                                 
                                 ; Compoud operands
                                 OperandG:
00021d fcba                      	.DW	0xFCBA				; test value for operand G
                                 OperandH:
00021e 2022                      	.DW	0x2022				; test value for operand H
                                 OperandI:
00021f 21bb                      	.DW	0x21BB				; test value for operand I
                                 
                                 ;***********************************************************
                                 ;*	Data Memory Allocation
                                 ;***********************************************************
                                 .dseg
                                 .org	$0100				; data memory allocation for MUL16 example
000100                           addrA:	.byte 2
000102                           addrB:	.byte 2
000104                           LAddrP:	.byte 4
                                 
                                 ; Below is an example of data memory allocation for ADD16.
                                 ; Consider using something similar for SUB16 and MUL24.
                                 .org	$0110				; data memory allocation for operands
                                 ADD16_OP1:	;$0110
000110                           		.byte 2				; allocate two bytes for first operand of ADD16
                                 ADD16_OP2:	;$0112
000112                           		.byte 2				; allocate two bytes for second operand of ADD16
                                 SUB16_OP1:	;$0114
000114                           		.byte 2				; allocate two bytes for first operand of SUB16
                                 SUB16_OP2:	;$0116
000116                           		.byte 2				; allocate two bytes for second operand of SUB16
                                 MUL24_OP1:	;$0118
000118                           		.byte 3				; allocate three bytes for first operand of MUL24
                                 MUL24_OP2:	;$011B
00011b                           		.byte 3				; allocate three bytes for second operand of MUL24
                                 
                                 
                                 .org	$0120				; data memory allocation for results
                                 ADD16_Result:
000120                           		.byte 3				; allocate three bytes for ADD16 result
                                 .org	$0130
                                 SUB16_Result:
000130                           		.byte 2				; allocate two bytes for SUB16 result
                                 .org	$0140
                                 MUL24_Result:
000140                           		.byte 4				; allocate four bytes for MUL24 result
                                 
                                 ;***********************************************************
                                 ;*	Additional Program Includes
                                 ;***********************************************************
                                 ; There are no additional file includes for this program


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega128" register use summary:
x  :  16 y  :  25 z  :  33 r0 :  10 r1 :   8 r2 :  28 r3 :  56 r4 :  32 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:  47 r17:  32 r18:  14 r19:   0 r20:   0 
r21:   0 r22:   0 r23:   0 r24:   0 r25:   0 r26:  22 r27:  22 r28:  33 
r29:  33 r30:  43 r31:  52 
Registers used: 17 out of 35 (48.6%)

"ATmega128" instruction use summary:
.lds  :   0 .sts  :   0 adc   :  14 add   :   5 adiw  :   6 and   :   0 
andi  :   0 asr   :   0 bclr  :   1 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   1 brcs  :   1 break :   0 breq  :   0 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :  11 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   0 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   5 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :   0 cpse  :   0 dec   :  11 elpm  :   0 eor   :   0 fmul  :   0 
fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   0 inc   :   0 
jmp   :   0 ld    :  21 ldd   :  12 ldi   :  82 lds   :   0 lpm   :   9 
lsl   :  18 lsr   :   0 mov   :   0 movw  :   0 mul   :  10 muls  :   0 
mulsu :   0 neg   :   0 nop   :   8 or    :   0 ori   :   0 out   :   2 
pop   :  82 push  :  82 rcall :  17 ret   :  12 reti  :   0 rjmp  :   3 
rol   :   0 ror   :   0 sbc   :   1 sbci  :   0 sbi   :   0 sbic  :   0 
sbis  :   0 sbiw  :   1 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  32 std   :   0 
sts   :   0 sub   :   1 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 

Instructions used: 26 out of 114 (22.8%)

"ATmega128" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000440    896     22    918  131072   0.7%
[.dseg] 0x000100 0x000144      0     31     31    4096   0.8%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 0 warnings
